openapi: 3.0.1
info:
  version: 1.0.0
  title: Books and Authors API
  description: API for managing books and authors

components:
  securitySchemes:
    bearerAuth:
      type: apiKey
      in: header
      name: Authorization
  schemas:
    AuthorVM:
      type: object
      properties:
        fullName:
          type: string
        yearOfBirth:
          type: integer
      required:
        - fullName
        - yearOfBirth
    
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: The unique identifier for the book.
        title:
          type: string
          description: The title of the book.
        description:
          type: string
          description: The description of the book.
        image:
          type: string
          format: binary
          description: The image of the book.
        rating:
          type: integer
          description: The rating of the book.
        publicationYear:
          type: integer
          format: int32
          description: The year of publication of the book.
        isTaken:
          type: boolean
          description: Indicates if the book is currently taken.
        dataAdded:
          type: string
          format: date-time
          description: The date when the book was added to the database.
      required:
        - title
        - description
        - isTaken
        - dataAdded
        
    BookWithAuthorsFillingVM:
      type: object
      properties:
        Title:
          type: string
        Description:
          type: string
        Rating:
          type: integer
          format: int32
        PublicationYear:
          type: integer
          format: int32
        AuthorFullName:
          type: array
          items:
            type: string
      required:
        - Title
        - AuthorFullName
        
    AuthorWithBooksVM:
      type: object
      properties:
        fullName:
          type: string
        yearOfBirth:
          type: integer
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
      required:
        - fullName
        - yearOfBirth
    BookWithAuthorsVM:
      type: object
      properties:
        Title:
          type: string
          nullable: true
        Description:
          type: string
          nullable: true
        Image:
          type: string
          format: binary
          nullable: true
        Rating:
          type: integer
          nullable: true
        PublicationYear:
          type: integer
          nullable: true
        IsTaken:
          type: boolean
        AuthorFullName:
          type: array
          items:
            type: string
            nullable: true

    Credential:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

security:
  - bearerAuth: []

paths:
  /api/authentication:
    post:
      summary: Authenticate a user and generate a token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  tokenType:
                    type: string
                  expiresIn:
                    type: integer
                required:
                  - accessToken
                  - tokenType
                  - expiresIn
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      tags:
        - Authentication

  /api/author/get-book-with-author/{fullName}:
    get:
      summary: Retrieve an author's details and their associated books.
      tags:
        - Author
      parameters:
        - in: path
          name: fullName
          schema:
            type: string
          required: true
          description: The full name of the author to retrieve.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorWithBooksVM'
        '404':
          description: Not Found
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /api/author/add-author:
    post:
      summary: Add a new author to the database.
      tags:
        - Author
      security: 
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorVM'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorVM'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
       
  /api/books/get-all-books:
    get:
      summary: Retrieve all books.
      tags:
      - Books
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /api/books/get-book-for-title/{title}:
    get:
      summary: Retrieve a book by its title.
      tags:
      - Books
      parameters:
        - in: path
          name: title
          required: true
          description: The title of the book to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  
  paths:
  /api/books/add-book-with-authors:
    post:
      summary: Add a book with authors.
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BookWithAuthorsFillingVM'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      tags:
        - Books
  
  /api/books/update-book-by-title/{title}:
    put:
      summary: Update book details by title.
      security:
        - bearerAuth: []
      parameters:
        - name: title
          in: path
          required: true
          description: The title of the book to be updated.
          schema:
            type: string
        - in: body
          name: book
          description: The book object with updated details.
          schema:
            $ref: '#/components/schemas/BookWithAuthorsVM'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      tags:
        - Books
        
  /api/Books/take-book-by-title and author/{title}/{author}:
    put:
      tags:
        - Books
      summary: Take out a book from the library by its title and author
      operationId: takeBook
      security:
        - bearerAuth: []
      parameters:
        - name: title
          in: path
          required: true
          schema:
            type: string
          description: The title of the book to take out
        - name: author
          in: path
          required: true
          schema:
            type: string
          description: The author of the book to take out
      responses:
        '200':
          description: Successfully took out the book
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the taken-out book
        '400':
          description: Bad request - the request parameters are incorrect
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized - the user is not authenticated
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Not found - the requested book could not be found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error - something went wrong on the server
          content:
            text/plain:
              schema:
                type: string
  /api/Books/delete-author-from-book/{title}/{authorname}:
    delete:
      summary: Delete an author from a book.
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - name: title
          in: path
          description: The title of the book to delete an author from.
          required: true
          schema:
            type: string
        - name: authorname
          in: path
          description: The name of the author to delete from the book.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation. Returns the updated book object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request. Returned when the input parameters are invalid.
        '401':
          description: Unauthorized. Returned when the user is not authenticated.
        '404':
          description: Not found. Returned when the book or author cannot be found.
        '500':
          description: Internal server error. Returned when an unexpected error occurs on the server.
          
  /api/Books/delete-book/{title}:
    delete:
      summary: Deletes a book from the library by title.
      tags:
        - Books
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: title
          required: true
          schema:
            type: string
          description: The title of the book to delete.
      responses:
        '204':
          description: No content - the book was successfully deleted.
        '400':
          description: Bad request - the title parameter is null or empty.
        '401':
          description: Unauthorized - the user is not authenticated.
        '404':
          description: Not found - no book was found with the specified title.
        '500':
          description: Internal server error - an error occurred while processing the request.





